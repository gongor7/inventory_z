// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                    String              @id @default(uuid()) @db.Uuid
  numberDocument        String              @db.VarChar @unique
  typeDocument          TypeDocument        @default(DNI)
  name                  String              @db.VarChar
  lastName              String              @db.VarChar
  email                 String?             @db.VarChar @unique
  active                Boolean             @default(true)
  codeActivation        String?             @db.VarChar
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  customer              Customer?
  staff                 Staff?
  sessions              Session[]
  forgotPassword        forgotPassword[]
  auditLog              AuditLog[]
  @@map("users")  
}
model Staff {
  userId                String              @db.Uuid @unique
  roleId                String              @db.Uuid
  password              String              @db.VarChar
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  role                  Role                @relation(fields: [roleId], references: [id])
  branches              Branch[]
  cashClosures          CashClosure[]
  @@map("staffs")
  @@id([userId])
}
model Role {
  id                    String              @id @default(uuid()) @db.Uuid
  name                  String              @db.VarChar
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  permissions           Permission[]
  staffs                Staff[]
  @@map("roles")
}
model Permission {
  id                    String              @id @default(uuid()) @db.Uuid
  action                TypeAction
  subject               TypeSubject
  inverted              Boolean             @default(false)
  conditions            Json?               @db.JsonB
  reason                String?             @db.Text
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  roles                 Role[]
  @@map("permissions")
}
model CashClosure {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  endTime               DateTime
  totalAmount           Float               @default(0.0)
  createdAt             DateTime            @default(now())
  staff                 Staff               @relation(fields: [userId], references: [userId])
  orers                 Order[]
  @@map("cashClosures")
}
model forgotPassword {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  code                  String              @db.VarChar
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  @@map("forgot_passwords")
}
model Session {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  token                 String              @db.VarChar @unique
  ipAddress             String              @db.VarChar
  userAgent             String              @db.VarChar
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  @@map("sessions")
}
model Customer {
  userId                String              @db.Uuid @unique
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  orers                 Order[]
  @@map("customers")
}
model Category {
  id                    String              @id @default(uuid()) @db.Uuid
  name                  String              @db.VarChar
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  products              Product[]
  @@map("categories")
}
model Product {
  id                    String              @id @default(uuid()) @db.Uuid
  categoryId            String              @db.Uuid
  code                  String?             @db.VarChar
  name                  String              @db.VarChar
  image                 String?             @db.VarChar
  barCode               String?             @db.VarChar
  visible               Boolean             @default(true)
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  category              Category            @relation(fields: [categoryId], references: [id])
  presentations         Presentation[]
  unitConversions       UnitConversion[]
  @@map("products")
}
model Presentation {
  id                    String              @id @default(uuid()) @db.Uuid
  productId             String              @db.Uuid 
  branchId              String              @db.Uuid
  typeUnit              TypeUnit
  active                Boolean             @default(true)
  product               Product             @relation(fields: [productId], references: [id])
  branch                Branch              @relation(fields: [branchId], references: [id])
  prices                Price[]
  inputs                Input[]
  outputs               Output[]
  kardexs               Kardex[]
  @@unique([productId, branchId, typeUnit])
}
model Price {
  id                    String              @id @default(uuid()) @db.Uuid
  presentationId        String              @db.Uuid
  price                 Float               @default(0.0)  
  discount              Float               @default(0.0)
  typeDiscount          TypeDiscount        @default(MONTO)
  changedReason         String              @default("creado")
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  presentation          Presentation        @relation(fields: [presentationId], references: [id])
  @@map("prices")
}
model UnitConversion {
  id                    String              @id @default(uuid()) @db.Uuid
  productId             String              @db.Uuid
  fromUnit              TypeUnit
  toUnit                TypeUnit
  factor                Int
  product               Product             @relation(fields: [productId], references: [id])
  @@unique([productId, fromUnit, toUnit])
}
model Branch {
  id                    String              @id @default(uuid()) @db.Uuid
  name                  String              @db.VarChar
  address               String?             @db.VarChar
  phone                 String?             @db.VarChar
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  staffs                Staff[]
  karedxs               Kardex[]
  inputs                Input[]
  outputs               Output[]
  orders                Order[]
  presentations         Presentation[]
  @@map("branches")
}
model Input {
  id                    String              @id @default(uuid()) @db.Uuid
  branchId              String              @db.Uuid
  presentationId        String              @db.Uuid
  quantity              Int                 @db.Integer
  price                 Float               @default(0.0)
  dueDate               DateTime?           @db.Date
  detail                String              @db.VarChar
  createdAt             DateTime            @default(now())
  branch                Branch              @relation(fields: [branchId], references: [id])
  presentation          Presentation        @relation(fields: [presentationId], references: [id])
  @@map("inputs")
}
model Output {
  id                    String              @id @default(uuid()) @db.Uuid
  branchId              String              @db.Uuid
  orderId               String              @db.Uuid
  presentationId        String              @db.Uuid
  quantity              Int                 @db.Integer
  price                 Float               @default(0.0)
  detail                String              @db.VarChar
  createdAt             DateTime            @default(now())
  branch                Branch              @relation(fields: [branchId], references: [id])
  order                 Order               @relation(fields: [orderId], references: [id])
  presentation          Presentation        @relation(fields: [presentationId], references: [id])
  @@map("outputs")
}
model Kardex {
  branchId              String              @db.Uuid
  presentationId        String              @db.Uuid
  referenceId           String              @db.Uuid
  typeReference         TypeReference
  stock                 Int                 @db.Integer
  presentation          Presentation        @relation(fields: [presentationId], references: [id])
  branch                Branch              @relation(fields: [branchId], references: [id])
  createdAt             DateTime            @default(now())
  @@unique([referenceId,typeReference])
  @@map("kardexs")
}
model Order {
  id                    String              @id @default(uuid()) @db.Uuid
  customerId            String              @db.Uuid
  branchId              String              @db.Uuid
  closureId             String?             @db.Uuid 
  amount                Float               @default(0.0)
  active                Boolean             @db.Boolean @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  outputs               Output[]
  customer              Customer            @relation(fields: [customerId], references: [userId])
  branch                Branch              @relation(fields: [branchId], references: [id])
  closure               CashClosure?        @relation(fields: [closureId], references: [id])
  @@map("orders")
}
model AuditLog {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  action                String              // 'CREATE', 'UPDATE', 'DELETE'
  entity                String              // Nombre de la tabla: 'Price', 'Product', etc.
  entityId              String              @db.Uuid
  dataBefore            Json?               // Estado anterior (si aplica)
  dataAfter             Json?               // Estado nuevo (si aplica)
  timestamp             DateTime            @default(now())
  description           String?             // Mensaje opcional ("Cambio de precio por inflación")
  user                  User                @relation(fields: [userId], references: [id])
  @@map("audit_logs")
}

// emuns section
enum TypeDocument {
  DNI
  RUC
  PASAPORTE
}
enum TypeDiscount {
  MONTO
  PORCENTAJE
}
enum TypeUnit {
  UNIDAD
  LIBRA
  KILO
  CAJA
  DOCENA
}
enum TypeReference {
  inputs
  outputs
}

enum TypeAction {
  manage
  create
  read
  update
  delete
}

enum TypeSubject {
  all
  branch
  category
  customer
  input
  kardex
  order
  permission
  product
  role
  staff
  user
  presentation
  price
  output
}